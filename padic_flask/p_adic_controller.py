from flask import Flask, request, url_for, render_template
from p_adic_compute import p_adic_abs
from p_adic_model import InputForm
import gunicorn

app = Flask(__name__)
"""
The web application is the app object of class Flask.
"""

"""
# View

The View consists of a URL and a corresponding function to call when the URL 
is invoked. The function name is chosen to be same as the url to which it maps, 
but this is not necessary. 

The decorator @app.route('/url_name', ...) maps the (default) flask URL 
http://127.0.0.1:5000/url_name to a call to the view function.

The methods argument must be as shown to allow the user to communicate with 
the web page.

# see https://youtu.be/9MHYHgh4jYc?si=k0OCWvki-qxbkPKx
"""

# route decorator
@app.route('/', methods=['GET', 'POST'])
def p_adic_view():
    """
    This function calls a form object from the model and a compute function
    from the compute module, and then passes values to the view template and 
    renders it with the render_template function.
    
    There are two possibilities from the form element.  Either: 
        - the user has submit values
        - the user has not submitted values

    In the former case, request.method equals 'POST' and we can extract data 
    from the form object.  We then call compute function and return its result.

    In the latter case, we return result = None.
    
    The logic for the result case is handled in the view template.
        - Why do this?
    """

    # redo this with FlaskForm?  See notes
    input_form = InputForm(request.form)

    if request.method == 'POST' and input_form.validate():
        # when user enters data and submits form, validate data and compute
        # input fields generated by class attributes in p_adic_model
        
        # why create new variables here?
        prime = input_form.prime.data
        rational = input_form.rational.data
        result = p_adic_abs(prime, rational)
    else:
        result = None
    
    # rounding?
    # result = '%.5f' % result
    
    return render_template("p_adic_view.html", form=input_form, result=result)

if __name__ == '__main__':
    app.run(host="0.0.0.0")
    # app.run(debug=True)